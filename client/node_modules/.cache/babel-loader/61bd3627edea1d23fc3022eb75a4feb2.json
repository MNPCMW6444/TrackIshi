{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\MichaeLab\\\\Documents\\\\GitHub\\\\TrackIshi\\\\client\\\\src\\\\components\\\\page\\\\global\\\\Opinions\\\\NewOpinionButton.js\",\n    _s = $RefreshSig$();\n\nimport NewOpinion from \"./NewOpinion\";\nimport NewOpinionGeneral from \"./NewOpinionGeneral\";\nimport Modal from \"react-modal\";\nimport React, { useState } from \"react\";\nimport SuccessMessage from \"../../../messages/SuccessMessage\";\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"25%\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    overflow: \"auto\",\n    maxHeight: \"100vh\"\n  }\n};\nexport default function NewOpinionButton(props) {\n  _s();\n\n  const [modalIsOpen, setIsOpen] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(null);\n\n  function openModal() {\n    setIsOpen(true);\n  }\n\n  function afterOpenModal() {}\n\n  function closeModal() {\n    setIsOpen(false);\n  }\n\n  let general = \" לאיש צוות זה\";\n  if (props.shel === \"general\") general = \" באמצעות טופס כללי\";\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"OpinionOpen\",\n        style: {\n          backgroundColor: \"green\"\n        },\n        onClick: openModal,\n        children: 'הזן חוו\"ד חדש' + general\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: modalIsOpen,\n        onAfterOpen: afterOpenModal,\n        onRequestClose: closeModal,\n        style: customStyles,\n        contentLabel: \"Example Modal\",\n        children: props.shel === \"general\" ? /*#__PURE__*/_jsxDEV(NewOpinionGeneral, {\n          forClosing: closeModal,\n          suc: setSuccessMessage,\n          shel: props.shel,\n          shels: props.shels,\n          setDidupdated: props.setDidupdated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(NewOpinion, {\n          forClosing: closeModal,\n          suc: setSuccessMessage,\n          shel: props.shel,\n          setDidupdated: props.setDidupdated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SuccessMessage, {\n        message: successMessage,\n        clear: () => setSuccessMessage(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(NewOpinionButton, \"w8hiwv+CPlqFbwLM5jAdd8ljl2c=\");\n\n_c = NewOpinionButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewOpinionButton\");","map":{"version":3,"sources":["C:/Users/MichaeLab/Documents/GitHub/TrackIshi/client/src/components/page/global/Opinions/NewOpinionButton.js"],"names":["NewOpinion","NewOpinionGeneral","Modal","React","useState","SuccessMessage","customStyles","content","top","left","right","bottom","marginRight","transform","overflow","maxHeight","NewOpinionButton","props","modalIsOpen","setIsOpen","successMessage","setSuccessMessage","openModal","afterOpenModal","closeModal","general","shel","backgroundColor","shels","setDidupdated"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,KADE;AAEPC,IAAAA,IAAI,EAAE,KAFC;AAGPC,IAAAA,KAAK,EAAE,KAHA;AAIPC,IAAAA,MAAM,EAAE,MAJD;AAKPC,IAAAA,WAAW,EAAE,MALN;AAMPC,IAAAA,SAAS,EAAE,uBANJ;AAOPC,IAAAA,QAAQ,EAAE,MAPH;AAQPC,IAAAA,SAAS,EAAE;AARJ;AADU,CAArB;AAaA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAC9C,QAAM,CAACC,WAAD,EAAcC,SAAd,IAA2Bf,QAAQ,CAAC,KAAD,CAAzC;AAEA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAAC,IAAD,CAApD;;AAEA,WAASkB,SAAT,GAAqB;AACnBH,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,WAASI,cAAT,GAA0B,CAAE;;AAE5B,WAASC,UAAT,GAAsB;AACpBL,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AAED,MAAIM,OAAO,GAAG,eAAd;AACA,MAAIR,KAAK,CAACS,IAAN,KAAe,SAAnB,EAA8BD,OAAO,GAAG,oBAAV;AAE9B,sBACE;AAAA,4BACE;AAAA,6BACE;AACE,QAAA,SAAS,EAAC,aADZ;AAEE,QAAA,KAAK,EAAE;AAAEE,UAAAA,eAAe,EAAE;AAAnB,SAFT;AAGE,QAAA,OAAO,EAAEL,SAHX;AAAA,kBAKG,kBAAkBG;AALrB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAA;AAAA;AAAA;AAAA,YAVF,eAWE;AAAA,6BACE,QAAC,KAAD;AACE,QAAA,MAAM,EAAEP,WADV;AAEE,QAAA,WAAW,EAAEK,cAFf;AAGE,QAAA,cAAc,EAAEC,UAHlB;AAIE,QAAA,KAAK,EAAElB,YAJT;AAKE,QAAA,YAAY,EAAC,eALf;AAAA,kBAOGW,KAAK,CAACS,IAAN,KAAe,SAAf,gBACC,QAAC,iBAAD;AACE,UAAA,UAAU,EAAEF,UADd;AAEE,UAAA,GAAG,EAAEH,iBAFP;AAGE,UAAA,IAAI,EAAEJ,KAAK,CAACS,IAHd;AAIE,UAAA,KAAK,EAAET,KAAK,CAACW,KAJf;AAKE,UAAA,aAAa,EAAEX,KAAK,CAACY;AALvB;AAAA;AAAA;AAAA;AAAA,gBADD,gBASC,QAAC,UAAD;AACE,UAAA,UAAU,EAAEL,UADd;AAEE,UAAA,GAAG,EAAEH,iBAFP;AAGE,UAAA,IAAI,EAAEJ,KAAK,CAACS,IAHd;AAIE,UAAA,aAAa,EAAET,KAAK,CAACY;AAJvB;AAAA;AAAA;AAAA;AAAA;AAhBJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAXF,EAsCGT,cAAc,iBACb;AAAA,iBACG,GADH,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,cAAD;AACE,QAAA,OAAO,EAAEA,cADX;AAEE,QAAA,KAAK,EAAE,MAAMC,iBAAiB,CAAC,IAAD;AAFhC;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA,oBAvCJ;AAAA,kBADF;AAmDD;;GArEuBL,gB;;KAAAA,gB","sourcesContent":["import NewOpinion from \"./NewOpinion\";\r\nimport NewOpinionGeneral from \"./NewOpinionGeneral\";\r\nimport Modal from \"react-modal\";\r\nimport React, { useState } from \"react\";\r\nimport SuccessMessage from \"../../../messages/SuccessMessage\";\r\n\r\nconst customStyles = {\r\n  content: {\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    right: \"25%\",\r\n    bottom: \"auto\",\r\n    marginRight: \"-50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    overflow: \"auto\",\r\n    maxHeight: \"100vh\",\r\n  },\r\n};\r\n\r\nexport default function NewOpinionButton(props) {\r\n  const [modalIsOpen, setIsOpen] = useState(false);\r\n\r\n  const [successMessage, setSuccessMessage] = useState(null);\r\n\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n\r\n  function afterOpenModal() {}\r\n\r\n  function closeModal() {\r\n    setIsOpen(false);\r\n  }\r\n\r\n  let general = \" לאיש צוות זה\";\r\n  if (props.shel === \"general\") general = \" באמצעות טופס כללי\";\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <button\r\n          className=\"OpinionOpen\"\r\n          style={{ backgroundColor: \"green\" }}\r\n          onClick={openModal}\r\n        >\r\n          {'הזן חוו\"ד חדש' + general}\r\n        </button>\r\n      </div>\r\n      <br />\r\n      <div>\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onAfterOpen={afterOpenModal}\r\n          onRequestClose={closeModal}\r\n          style={customStyles}\r\n          contentLabel=\"Example Modal\"\r\n        >\r\n          {props.shel === \"general\" ? (\r\n            <NewOpinionGeneral\r\n              forClosing={closeModal}\r\n              suc={setSuccessMessage}\r\n              shel={props.shel}\r\n              shels={props.shels}\r\n              setDidupdated={props.setDidupdated}\r\n            />\r\n          ) : (\r\n            <NewOpinion\r\n              forClosing={closeModal}\r\n              suc={setSuccessMessage}\r\n              shel={props.shel}\r\n              setDidupdated={props.setDidupdated}\r\n            />\r\n          )}\r\n        </Modal>\r\n      </div>\r\n\r\n      {successMessage && (\r\n        <>\r\n          {\" \"}\r\n          <br />\r\n          <SuccessMessage\r\n            message={successMessage}\r\n            clear={() => setSuccessMessage(null)}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}